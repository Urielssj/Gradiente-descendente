# -*- coding: utf-8 -*-
"""
Created on Mon Oct 25 16:44:16 2021

@author: uriel
"""
import numpy as np
def gradienteConjugado(Ab, x0, verbose = False):
  """
  Esta función resuelve un sistema lineal Ax = b mediante el método
  de Gradiente Conjugado

  Args:
    Ab: Array bidimensional de numpy (Matriz ampliada del sistema)
    x0: Array unidimensional (Valor inicial)
    verbose: Booleano para mostrar o no los resultados relevantes

  Returns:
    x: Array unidimensional (Solución del sistema)
  """

  n = Ab.shape[0]
  x = x0.copy().reshape((n, 1))
  
  # Obtenemos matriz de coeficientes y vector de términos independientes
  A = Ab[:, :-1].copy()
  b = Ab[:, -1].copy()
  b = b.reshape((n, 1))

  r = b - A.dot(x)
  v = r.copy()
  t = float((r.transpose().dot(r)) / (v.transpose().dot(A.dot(v)))[0])
  if verbose:
    print("x^(0) = ", x.reshape((n)))
    print("r^(0) = ", r.reshape((n)))
    
    print("\nv^(1) = ", v.reshape((n)))
    print("t^(1) =", t)
  
  x = x + t * v
  r1 = b - A.dot(x)
  if verbose:
    print("x^(1) = {}".format(x.reshape((n))))
    print("r^(1) = {}".format(r1.reshape((n))))

  for k in range(2, n + 1):
    s = float((r1.transpose().dot(r1)) / (r.transpose().dot(r))[0])
    v = r1 + s * v
    t = float((r1.transpose().dot(r1)) / (v.transpose().dot(A.dot(v)))[0])
    x = x + t * v
    
    r = r1.copy()
    r1 = b - A.dot(x)

    if verbose:
      print("\ns^({}) = {}".format(k - 1, s))
      print("v^({}) = {}".format(k, v.reshape((n))))
      print("t^({}) = {}".format(k, t))
      print("x^({}) = {}".format(k, x.reshape((n))))
      print("r^({}) = {}".format(k, r1.reshape((n))))

  x = x.reshape((n))    
  if verbose:
    print("\nx =", x)
  return x


Ab = [[5.4, 5, 4.4, 5, 3.4, 1],
      [5, 6, 3, 4.8, 2.6, 2],
      [4.4, 3, 4.8, 4.6, 4, 3],
      [5, 4.8, 4.6, 6, 4.6, 4],
      [3.4, 2.6, 4, 4.6, 4.2, 5]]
Ab = np.array(Ab)
print("Ab =\n", Ab)
x0 = np.array([0, 0, 0, 0, 0])
x = gradienteConjugado(Ab, x0, verbose = True)
